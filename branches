#!/bin/bash

NO_ARGS=0
USAGE="$(basename "$0") [-f] [-l [-a]] [-p] [-b branch] path/to/repos"
EXIT_STATE=0

function usage {
    echo "$USAGE"
    cat <<EOF
Search the file system down from the specified path looking for git repos.

For each repo found print the name, current branch, (optionally the latest tag)
and the path to the repo.

Optional a new named branch can be created and checkout out/pulled.

-f  Fetch origin
-p  Plain out put, suppress colours. Use to create a changelog entry.
-l  Show latest tag. If colours are enabled then tag that have different
    content to the current branch are coloured red.
-b branch
    If specified and the remote branch exists then a the branch is checked out
    and pulled. Existing changes will be stashed, and then applied.
-m makefile
    Attempt to check the branch/tag specified in this make file for each repo
    found. Overrides -b and implies -f
EOF
}

while getopts "b:lm:pfh" options; do
    case $options in
        b) new_branch="$OPTARG";;
        l) latest_tag=1;;
        p) plain_output=1;;
        f) fetch_origin=1;;
        m) makefile="$OPTARG";;
        h) usage; exit;;
        *) echo "unknown option";;
    esac
done

shift $((OPTIND-1))

if [ -z "$plain_output" ]; then
    ESC_SEQ="\x1b["
    COL_RESET=$ESC_SEQ"39;49;00m"
    COL_RED=$ESC_SEQ"31;01m"
    COL_GREEN=$ESC_SEQ"32;01m"
    COL_YELLOW=$ESC_SEQ"33;01m"
    COL_BLUE=$ESC_SEQ"34;01m"
    COL_MAGENTA=$ESC_SEQ"35;01m"
    COL_CYAN=$ESC_SEQ"36;01m"
fi

if [ -n "$latest_tag" ]; then
    printf "${COL_GREEN}%-20s %-25s %-10s %s${COL_RESET}\n" Name Branch Tag Path
else
    printf "${COL_GREEN}%-20s %-25s %s${COL_RESET}\n" Name Branch Path
fi

EXIT_STATE=0
if [ -n "$1" ]; then
    ROOT_PATH=$1
else
    ROOT_PATH=$(pwd)
fi

for var in $ROOT_PATH; do
    if [ -d "$var" ]; then
        for x in $(find "$var"/* -name .git | grep -v vendor); do
            dir=$(dirname "$x")
            name=$(basename "$dir")
            clean_dir=${dir#$ROOT_PATH/}
            if [ "$name" == "tabs-api-client" ] || [ "$name" == "contrib" ]; then
              continue
            fi
            GIT_CMD="git -C $(dirname "$x")"
            # Fetch latest
            if [ -n "$fetch_origin" ] || [ -n "$makefile" ]; then
                $GIT_CMD fetch origin > /dev/null
            fi
            branch=$($GIT_CMD branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/' | tr -d "()")
            if [ -n "$latest_tag" ]; then
                lt=$($GIT_CMD describe --abbrev=0 --tags 2> /dev/null)
                diff=$($GIT_CMD diff refs/heads/"$branch"..refs/tags/"$lt" 2> /dev/null)
                if [ -n "$diff" ]; then
                    printf "$COL_MAGENTA%-20s$COL_RESET %-25s $COL_RED%-10s$COL_RESET %s\n" "$name" "$branch" "$lt" "$clean_dir"
                else
                    printf "$COL_CYAN%-20s$COL_RESET %-25s %-10s %s\n" "$name" "$branch" "$lt" "$clean_dir"
                fi
            else
                printf "%-25s %-20s %s\n" "$name" "$branch" "$clean_dir"
            fi
            if [ -n "$makefile" ]; then
                tag=$(grep "$name]\[download]\[tag" "$makefile" | awk '{print $3}')
                echo
                echo "$tag"
                echo
                new_branch=$tag
            fi
            if [ ! -z "$new_branch" ]; then
                # The --git-dir doesn't work in this case
                $GIT_CMD stash
                $GIT_CMD fetch origin --tags
                # $GIT_CMD show-branch $new_branch > /dev/null
                $GIT_CMD show-branch "$new_branch"
                if [ $GIT_CMD show-branch "$new_branch" ]; then
                    $GIT_CMD checkout "$new_branch"
                    $GIT_CMD pull origin "$new_branch"
                fi
            fi
        done
    fi
done

exit $EXIT_STATE
